
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>confluent vs powergraph</title>

    <style>

      .vis{
            /*margin-right: 5px;*/
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            /*border-width:1px;
            border-style:solid;
            border-color:black*/
            /*width: 40%;*/
        }
      .visOverlay{
              /*margin-right: 5px;*/
              width: 100%;
              height: 100%;
              position: absolute;
              top: 0;
              left: 0;
              /*border-width:1px;
              border-style:solid;
              border-color:black*/
              /*width: 40%;*/
        }
				.number_groups{
					position:absolute;
					top:405px;
					left:1600px;
				}
        .span{
          font-family:arial;
          font-size: 20px
        }

        .motion_button:focus {outline:0;}
        .motion_button{
          background-color: #e6f9ff;
          width: 200px;
          height: 30px;
          /*line-height: 100px;*/
          /*margin: auto;*/
          margin-left: 30px;
          color: "black";
          cursor: pointer;
          overflow: hidden;
          border-radius: 10px;
          font-size:15px;
          box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.3);
          text-decoration: none;
          border: none;
          -webkit-font-smoothing: antialiased;
        }

        #spacePress{
          color: black;
          position: absolute;
          margin-left: 1550px;
          margin-top: 700px;
          font-size: 30px;

        }
        #number_trial{
          color: #999797;
          position: absolute;
        }
        #next_trial{
          top:905px;
					left:1870px;
          position: absolute;
        }
        #count_down{
          color: white;
          position: absolute;
          top: 105px;
          left: 1050px;
          font-size: 50px;
        }


    </style>


</head>
  <body>
    <div id="popup1" class="overlay">
      <div class="popup">
      <!--  <h2>Oupssss .... <i class="fa fa-frown-o" aria-hidden="true"></i></h2> -->
        <a id="close_popup" class='close'>&times;</a>
        <div class="content" >
            <span id="entry"></span>
        </div>
      </div>
    </div>

    <div id="count_down">   </div>

    <div id="number_trial">
      <span>Trial : <%= trial %> / 28</span><br/>
      <span>User : <%= id_user %> </span>
    </div>
      <div class="clear"></div>
  	  <div class="vis" id="visFrame"></div>
      <div class="visOverlay" id="visFrameOverlay3">
        <svg id=markerOverlay width=100% height=100%  style="background:transparent"></svg>
      </div>

      <div class="clear"></div>
			<div class="number_groups">
				<span class="span"> On the graph you can see two edges named A and B.</span><br/>
				<span class="span"> Once pressed space, all the other edges will appear and particles flows will also appear on each edge.</span><br/>
				<span class="span"> The particle speed of edge A will be either superior or inferior to the particle speed of edge B.</span><br/>
        <span class="span"> So you need to ajust the particle speed of edge B to match the particle speed of edge A.</span><br/><br/><br/><br/>
        <span class="span"> Particle speed of B: </span>
        <button id="decreaseMotion" class="motion_button"> Decrease </button>
        <button id="increaseMotion" class="motion_button"> Increase </button><br/>
			</div>
      <button type="submit" class="flat_button" id="next_trial"> Ok </button><br/>
      <span id="spacePress">PRESS SPACE TO REVEAL THE GRAPH AND START THE TRIAL</span>



  </body>
  <script src="lib/flownet.js"></script>
  <script src="lib/three.min.js"></script>
  <script src="lib/jquery.min.js"></script>
  <script src="lib/d3.min.js"></script>
  <script src="lib/cola.min.js"></script>

  <link rel="stylesheet" type="text/css" href="lib/expe.css">
  <link rel="stylesheet" type="text/css" href="lib/popup.css">
	<script>

var keyPressed = 0
var keyPressedList = []

var trial = String(<%= trial %>);
var edgeOption = <%- JSON.stringify(edgeOption) %>;
var data_path = <%- JSON.stringify(data) %>;
var edge_path = <%- JSON.stringify(edge) %>;
var edgesExp;

var graph;

var index_edge_reference;
var index_edge_target;

var flownet_graph;
var flownet_edges;

var pressSpaceBar = false
var start,end;

getEdges()


function getEdges(){
  $.get( edge_path, function(dataEdge) {
    edgesExp = dataEdge[edgeOption[0]][edgeOption[1]][edgeOption[2]][edgeOption[3]][edgeOption[4]]
    loadGraph()
  });
}

function loadGraph(){
  $.get( data_path, function(data) {
    graph = JSON.parse(JSON.stringify(data));
    for (var i = 0; i < graph.links.length; i++) {
      graph.links[i].special = false;
    }
    for (var i = 0; i < graph.links.length; i++) {
      if ( Number(graph.links[i].id) === Number(edgesExp.reference.id)) {
        graph.links[i].color = edgesExp.reference.color
        graph.links[i].speed = edgesExp.reference.speed
        index_edge_reference = i;
        console.log(edgesExp.reference.speed);
        graph.links[i].special = true;
      }if ( Number(graph.links[i].id) === Number(edgesExp.target.id)) {
        graph.links[i].color = edgesExp.target.color
        graph.links[i].speed = edgesExp.target.speed
        index_edge_target = i;
        graph.links[i].special = true;
        console.log(edgesExp.target.speed);
      }
    }

    d3.select("#visFrame").append('svg').attr('id', "visFrameSVG").attr('width', 1500).attr('height', 1300).style("background", "#ffffff")
        flownet_graph = flownet.graph("#visFrameSVG")
          .nodes(graph.nodes)
          .links(graph.links)

          .node_properties("color", function(d, i) { return "black" })
          .node_properties("size", 7)
          .node_properties("x", function(d, i) {return d.X ; })
          .node_properties("y", function(d, i) {return d.Y-100 ;  })

          .link_properties("color", "#f5F5F5")
          .link_properties("size", 8)
          .link_properties("visibility", "hidden")

          .particles('computationalMethod', "Speed-Spacing-RelativePattern")
          .particles('height', 2)
          .particles('size', 8.5)
          .particles('pattern', function(d){
            return d.pattern
          })
          .particles('spacing', function(d){
            return d.spacing
          })
          .particles('speed', function(d,i){
            return 12*d.speed;
          })
          .particles('color', function(d,i){
            return d.color
          })
          .particles("visibility", "hidden")


          flownet_edges = flownet_graph.selectAll()
            .filters(function(d,i){
                return d.special
            })
            .link_properties("visibility", "visible")

          console.log(flownet_edges);

            //.particule_properties("color", function(d, i) { return d.color })
          createLinkReferenceLabel()
          createLinkModularLabel()
  })
}

function showGraph(){
  flownet_graph.node_properties("visibility", "visible")
      .link_properties("visibility", "visible")
      .particles("visibility", "visible")
      .start()
}
  start = Date.now();
   $( "#close_popup" ).click(function() {
      d3.select('#popup1').style("display","none");
  });
   $( "#next_trial" ).click(function() {
		 send_data();
   });

function createLinkReferenceLabel(){
  console.log(graph);
  d3.select("#markerOverlay").append('text')
    .text("A")
    .style('font', 'arial')
    .style('font-size', '30px')
    .style('font-weight', 'bold')
    .style('text-anchor', 'middle')
    .attr('x', function(d){
      if ( graph.links[index_edge_reference].id%10 === 3) return graph.links[index_edge_reference].markerA.x +6
      if ( graph.links[index_edge_reference].id%10 === 7) return graph.links[index_edge_reference].markerA.x -6
      else return graph.links[index_edge_reference].markerA.x
    })
    .attr('y', function(d){
      if ( graph.links[index_edge_reference].id%10 === 5) return graph.links[index_edge_reference].markerA.y-100 + 15
      else return graph.links[index_edge_reference].markerA.y-100
    })
  d3.select("#markerOverlay").append('line')
    .attr('x1', graph.links[index_edge_reference].markerB.x)
    .attr('y1', graph.links[index_edge_reference].markerB.y-100)
    .attr('x2', graph.links[index_edge_reference].markerC.x)
    .attr('y2', graph.links[index_edge_reference].markerC.y-100)
    .attr('stroke', 'black')
    .attr('stroke-width', 3)
}

   function createLinkModularLabel(){
     d3.select("#markerOverlay").append('text')
      .text("B")
      .style('font', 'arial')
      .style('font-size', '30px')
      .style('font-weight', 'bold')
      .style('text-anchor', 'middle')
      .attr('x', function(d){
        if ( graph.links[index_edge_target].id%10 === 3) return graph.links[index_edge_target].markerA.x +6
        if ( graph.links[index_edge_target].id%10 === 7) return graph.links[index_edge_target].markerA.x -6
        else return graph.links[index_edge_target].markerA.x
      })
      .attr('y', function(d){
        if ( graph.links[index_edge_target].id%10 === 5) return graph.links[index_edge_target].markerA.y-100 + 15
        else return graph.links[index_edge_target].markerA.y-100
      })
    d3.select("#markerOverlay").append('line')
      .attr('x1', graph.links[index_edge_target].markerB.x)
      .attr('y1', graph.links[index_edge_target].markerB.y-100)
      .attr('x2', graph.links[index_edge_target].markerC.x)
      .attr('y2', graph.links[index_edge_target].markerC.y-100)
      .attr('stroke', 'black')
      .attr('stroke-width', 3)
   }

   function createLinkModular(){

     divide = 8
     if ( keyPressed == 1){
       var newSpeed = ((Math.max(graph.links[index_edge_target].speed,graph.links[index_edge_reference].speed)-Math.min(graph.links[index_edge_target].speed,graph.links[index_edge_reference].speed))/divide)
       graph.links[index_edge_target].speed = graph.links[index_edge_target].speed + newSpeed
     }else if (keyPressed == -1){
       var newSpeed = ((Math.max(graph.links[index_edge_target].speed,graph.links[index_edge_reference].speed)-Math.min(graph.links[index_edge_target].speed,graph.links[index_edge_reference].speed))/divide)
       graph.links[index_edge_target].speed = graph.links[index_edge_target].speed - newSpeed
     }
     if (graph.links[index_edge_target].speed < 0.05) graph.links[index_edge_target].speed = 0.05
     if (graph.links[index_edge_target].speed > 60) graph.links[index_edge_target].speed = 60

     flownet_edges.stop()
      .particles("speed", function(d){ return d.speed*12 })
      .start()
      console.log(graph.links[index_edge_reference].speed,graph.links[index_edge_target].speed);
   }

   function send_data(){
			//console.log(dat)
      end = Date.now();
			/***** RECUPERE LES DONNEEEES *******/
			var URL = window.location.href;
			var res = URL.split("/");
			var next_app = parseInt(res[res.length-1]);

      var graphALink = {speed: graph.links[index_edge_reference].speed, color: graph.links[index_edge_reference].color}
      var graphBLink = {speed: graph.links[index_edge_target].speed, color: graph.links[index_edge_target].color}

      var graphACleanLink = {speed: edgesExp.reference.speed, color: edgesExp.reference.color}
      var graphBCleanLink = {speed: edgesExp.target.speed, color: edgesExp.target.color}
      var data = {"redirection":next_app, "graphA":JSON.stringify(graphALink), "graphAClean":JSON.stringify(graphACleanLink),
            "graphB":JSON.stringify(graphBLink), "graphBClean":JSON.stringify(graphBCleanLink),"keyPressedList":JSON.stringify(keyPressedList), "completion_time":JSON.stringify((end-start)/1000)};

			$.ajax({
			 url: '/store_data_counting_group',
				type: "POST",
				dataType: "JSON",
				data: data,
				//success: function (data) {console.log("RESULT", data); window.location = data.redirection;},
				success: function (data) {console.log("RESULT", "data"); window.location = data.redirection;},
				error: function (xhr, status, error) {console.log('Error: ' + error.message);},
			});

   }


   d3.select('#increaseMotion').on('click', function(){
     if ( !pressSpaceBar ) return
     keyPressed = 1;
     keyPressedList.push(1)
      createLinkModular()
   })

   d3.select('#decreaseMotion').on('click', function(){
     if ( !pressSpaceBar ) return
     keyPressed = -1;
     keyPressedList.push(-1)
      createLinkModular()
   })

   document.addEventListener('keypress', (event) => {
     const keyName = event.key;
   	switch (keyName) {
   		case "Enter":
        if (!pressSpaceBar) return
   			send_data()
        return
   			break;
   		default:
   	}
    if ( event.keyCode === 32 && !pressSpaceBar){
      d3.select('#spacePress').remove()
      pressSpaceBar = true
      showGraph()
      return false
    }
  });

    document.addEventListener('keydown', (event) => {
      if ( !pressSpaceBar ) return
      const keyName = event.key;
    	console.log(keyName);
    	switch (keyName) {
        case "ArrowRight":
          keyPressed = 1;
          keyPressedList.push(1)
          createLinkModular()
    			break;
    		case "ArrowLeft":
          keyPressed = -1;
          keyPressedList.push(-1)
          createLinkModular()
    			break;
    		default:

    	}
   });

	</script>



</html>
