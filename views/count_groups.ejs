
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>confluent vs powergraph</title>

    <style>

      .vis{
            /*margin-right: 5px;*/
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            /*border-width:1px;
            border-style:solid;
            border-color:black*/
            /*width: 40%;*/
        }
      .visOverlay{
              /*margin-right: 5px;*/
              width: 100%;
              height: 100%;
              position: absolute;
              top: 0;
              left: 0;
              /*border-width:1px;
              border-style:solid;
              border-color:black*/
              /*width: 40%;*/
        }
				.number_groups{
					position:absolute;
					top:405px;
					left:1600px;
				}
        .span{
          font-family:arial;
          font-size: 20px
        }

        .motion_button:focus {outline:0;}
        .motion_button{
          background-color: #e6f9ff;
          width: 200px;
          height: 30px;
          /*line-height: 100px;*/
          /*margin: auto;*/
          margin-left: 30px;
          color: "black";
          cursor: pointer;
          overflow: hidden;
          border-radius: 10px;
          font-size:15px;
          box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.3);
          text-decoration: none;
          border: none;
          -webkit-font-smoothing: antialiased;
        }

        #spacePress{
          color: black;
          position: absolute;
          margin-left: 1550px;
          margin-top: 700px;
          font-size: 30px;

        }
        #number_trial{
          color: #999797;
          position: absolute;
        }
        #next_trial{
          top:905px;
					left:1870px;
          position: absolute;
        }
        #count_down{
          color: white;
          position: absolute;
          top: 105px;
          left: 1050px;
          font-size: 50px;
        }


    </style>


</head>
<body style="background-color:#777;">
  <div id="popup1" class="overlay">
    <div class="popup">
    <!--  <h2>Oupssss .... <i class="fa fa-frown-o" aria-hidden="true"></i></h2> -->
      <a id="close_popup" class='close'>&times;</a>
      <div class="content" >
          <span id="entry"></span>
      </div>
    </div>
  </div>

  <div id="count_down">   </div>

    <div class="clear"></div>
    <div class="vis" id="visFrame"></div>
    <div class="visOverlay" id="visFrameOverlay3">
      <svg id=markerOverlay width=100% height=100%  style="background:transparent"></svg>
    </div>

    <div class="clear"></div>
    <!-- <div class="number_groups">
      <span class="span"> On the graph you can see two edges named A and B.</span><br/>
      <span class="span"> Once pressed space, all the other edges will appear and each of them will have a particles flow.</span><br/><br/><br/>
      <span style="font-size:24;" class="span">During this trial you need to <span id="increaseDecrease" style="font-size:24; font-weight:bold;" class="span"></span>
      the speed of the particles of edge B until you notice a difference</span><br/><br/><br/><br/>
      <span class="span"> Particle speed of B: </span>
      <button id="decreaseMotion" class="motion_button"> Decrease </button>
      <button id="increaseMotion" class="motion_button"> Increase </button><br/>
    </div> -->
    <div class="number_groups">
      <span class="span"> Press <strong>left arrow key</strong> to <strong>decrease</strong> the motion speed on edge <strong>B</strong> or <br/>press <strong>right arrow key</strong> to <strong>increase</strong> the motion speed on edge <strong>B</strong>.</span><br/>
      <span class="span"> Once you perceive the motion speed on edges <strong>A</strong> and <strong>B</strong> as <strong>similar</strong>, <br/>click on "next trial" to validate your result:</span><br/><br/>
      <br/><br/><br/><br/>
      <button style="margin-left: 200px; visibility:hidden;" id="decreaseMotion" class="motion_button"> next trial </button>
    </div>
    <!-- <button type="submit" class="flat_button" id="next_trial"> Ok </button><br/> -->
    <span style="margin-left: 1600px;" id="spacePress">Press Enter when ready to start the trial.</span>
    <div id="number_trial">
      <span style="color:black;">Trial : <%= trial %> / 52</span><br/>
      <span style="color:black;">User : <%= id_user %> </span>
    </div>


</body>
  <script src="lib/flownet.js"></script>
  <script src="lib/three.min.js"></script>
  <script src="lib/jquery.min.js"></script>
  <script src="lib/d3.min.js"></script>
  <script src="lib/cola.min.js"></script>

  <link rel="stylesheet" type="text/css" href="lib/expe.css">
  <link rel="stylesheet" type="text/css" href="lib/popup.css">
	<script>

/*
1
2 21

2
3 11
3 14

3
14 19
3 5

4
1 19
18 25

5
2 21

6
12 17
0 1
12 18

7
4 16
3 7
5 27

8
5 9

*/

var keyPressed = 0
var keyPressedList = []

var trial = String(<%= trial %>);
var edgeOption = <%- JSON.stringify(edgeOption) %>;
var data_path = <%- JSON.stringify(data) %>;
var edge_path = <%- JSON.stringify(edge) %>;
var edgesExp;

var graph;

var index_edge_reference;
var index_edge_target;

var flownet_graph;
var flownet_edges;

var pressSpaceBar = false
var start,end;
// 100px == 2.35cm

if ( edgeOption[1] === "decrease"){
 d3.select("#increaseDecrease").text("decrease ")
}else if ( edgeOption[1] === "increase"){
 d3.select("#increaseDecrease").text("increase ")
}

getEdges()

function getEdges(){
  console.log(edge_path);
  $.get( edge_path, function(dataEdge) {
    edgesExp = dataEdge[edgeOption[0]][edgeOption[1]][edgeOption[2]]
    loadGraph()
  });
}

function loadGraph(){
  data_path += edgesExp.graph
  $.get( data_path, function(data) {
    graph = JSON.parse(JSON.stringify(data));

    for (var i = 0; i < graph.links.length; i++) {
      graph.links[i].special = false;
    }
    for (var i = 0; i < graph.links.length; i++) {
      if ( Number(graph.links[i].id) === Number(graph.reference)) {

      if (data_path.includes("height")){ graph.links[i].height = edgesExp.reference.color }
      if (data_path.includes("lumi")){ graph.links[i].color = edgesExp.reference.color }
      if (data_path.includes("width")){ graph.links[i].visual_pattern = edgesExp.reference.color }

        graph.links[i].speed = edgesExp.reference.speed
        index_edge_reference = i;
        console.log(edgesExp.reference.speed);
        graph.links[i].special = true;
      }if ( Number(graph.links[i].id) === Number(graph.target)) {

        if (data_path.includes("height")){ graph.links[i].height = edgesExp.target.color }
        if (data_path.includes("lumi")){ graph.links[i].color = edgesExp.target.color }
        if (data_path.includes("width")){ graph.links[i].visual_pattern = edgesExp.target.color }

        graph.links[i].speed = edgesExp.target.speed
        index_edge_target = i;
        graph.links[i].special = true;
        console.log(edgesExp.target.speed);
      }
    }
  for (var i = 0; i < graph.nodes.length; i++) {
    sou = false
    tar = false
    for (var j = 0; j < graph.links.length; j++) {
      if ( Number(graph.nodes[i].id) === Number(graph.links[j].source) ) sou = true
      if ( Number(graph.nodes[i].id) === Number(graph.links[j].target) ) tar = true
    }
    if ( !sou && !tar ){
      graph.nodes[i].X = -1000
      graph.nodes[i].Y = -1000
    }
  }

    d3.select("#visFrame").append('svg').attr('id', "visFrameSVG").attr('width', 1500).attr('height', 1300).style("background", "#777")
      .append("g").attr("id", "groupsvg").attr("transform", "translate(0,50)")
        flownet_graph = flownet.graph("#groupsvg")
          .nodes(graph.nodes)
          .links(graph.links)

          .node_properties("color", function(d, i) { return "black" })
          .node_properties("size", 7)
          .node_properties("x", function(d, i) {return d.X ; })
          .node_properties("y", function(d, i) {return d.Y ;  })
/*
          .node_properties('label_text', function(d, i){return 'id:'+d.id})
          .node_properties('label_x', function(d){ return d.X+12})
          .node_properties('label_y', function(d){ return d.Y-12})
          .node_properties('label_size', 16)
          .node_properties('label_font', 'arial')
          .node_properties('label_color', 'black')
*/
          .link_properties("color", function(d){
            console.log(d.color);
            /*if ( d.color === "#ffffff" || d.color === "#aaaaaa")*/ return "#7c7c7c"
            /*if ( d.color === "#555555" || d.color === "#000000")*/ return "#7c7c7c"
          })
          .link_properties("size", function(){
            if (data_path.includes("height")){
              return 17 + 2*4
            }else{
              return 4 + 2*4
            }
          })
          .link_properties("visibility", "hidden")
          .link_properties("interpolation", "basis")
          .link_properties("points", function(d){
              let centerX,centerY,x1,y1,x2,y2 = 0;
              let angle,distance = 0;
              for (var i = 0; i < graph.nodes.length; i++) {
                if ( Number(graph.nodes[i].id) === Number(d.source) ) {
                  x1 = graph.nodes[i].X
                  y1 = graph.nodes[i].Y
                }
                if ( Number(graph.nodes[i].id) === Number(d.target) ) {
                  x2 = graph.nodes[i].X
                  y2 = graph.nodes[i].Y
                }
              }

              distance1 = Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2))
              let UVector = { x:x2-x1, y:y2-y1}
              let VVector = { x:2, y:(-UVector.x/UVector.y)*2}

              centerX = (x1+x2)/2
              centerY = (y1+y2)/2
              distance2 = Math.sqrt(Math.pow(VVector.x,2)+Math.pow(VVector.y,2))
              let WVector = { x:VVector.x/distance2, y:VVector.y/distance2}

              cx3 = centerX - (WVector.x*(distance1/4))
              cy3 = centerY - (WVector.y*(distance1/4))

            return [{x:cx3, y:cy3}]

          })

          .particles('computationalMethod', "Speed-Spacing-AbsolutePattern")
          .particles('height', function(d){
            return d.height
          })
          .particles('visual_pattern', function(d){
            return d.pattern
          })
          .particles('spacing', function(d){
            return Number(d.spacing) + Number(d.pattern[0])
          })
          .particles('speed', function(d,i){
            return 12*d.speed;
          })
          .particles('color', function(d,i){
            return d.color
          })
          .particles("visibility", "hidden")


          flownet_edges = flownet_graph.selectAll()
            .filters(function(d,i){
                return d.special
            })
            .link_properties("visibility", "visible")

          console.log(flownet_edges);

            //.particule_properties("color", function(d, i) { return d.color })
          createLinkReferenceLabel()
          createLinkModularLabel()
  })
}

function showGraph(){
  d3.select("#decreaseMotion").style("visibility", "visible")
  flownet_graph.node_properties("visibility", "visible")
      .link_properties("visibility", "visible")
      .particles("visibility", "visible")
      .start()

      console.log(data_path);

}
  start = Date.now();
   $( "#close_popup" ).click(function() {
      d3.select('#popup1').style("display","none");
  });
   $( "#next_trial" ).click(function() {
     if (!pressSpaceBar) return
      send_data()
   });

function createLinkReferenceLabel(){

  let centerX,centerY,x1,y1,x2,y2 = 0;
  let angle,distance = 0;
  for (var i = 0; i < graph.nodes.length; i++) {
    if ( Number(graph.nodes[i].id) === Number(graph.links[index_edge_reference].source) ) {
      x1 = graph.nodes[i].X
      y1 = graph.nodes[i].Y
    }
    if ( Number(graph.nodes[i].id) === Number(graph.links[index_edge_reference].target) ) {
      x2 = graph.nodes[i].X
      y2 = graph.nodes[i].Y
    }
  }

  distance1 = Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2))
  let UVector = { x:x2-x1, y:y2-y1}
  let VVector = { x:2, y:(-UVector.x/UVector.y)*2}

  centerX = (x1+x2)/2
  centerY = (y1+y2)/2
  distance2 = Math.sqrt(Math.pow(VVector.x,2)+Math.pow(VVector.y,2))
  let WVector = { x:VVector.x/distance2, y:VVector.y/distance2}

  cx3 = centerX
  cy3 = centerY


  cx1 = centerX - (WVector.x*(distance1/10))
  cy1 = centerY - (WVector.y*(distance1/10))
  cx2 = centerX - (WVector.x*(distance1/18))
  cy2 = centerY - (WVector.y*(distance1/18))

  d3.select("#markerOverlay").append('text')
    .text("A")
    .style('font', 'arial')
    .style('font-size', '30px')
    .style('font-weight', 'bold')
    .style('text-anchor', 'middle')
    .attr('x', function(d){
      return cx3
    })
    .attr('y', function(d){
      return cy3
    })
    .attr('transform', "translate(0,50)")
  d3.select("#markerOverlay").append('line')
    .attr('x1', cx1)
    .attr('y1', cy1)
    .attr('x2', cx2)
    .attr('y2', cy2)
    .attr('stroke', 'black')
    .attr('stroke-width', 3)
    .attr('transform', "translate(0,50)")
}

   function createLinkModularLabel(){

     let centerX,centerY,x1,y1,x2,y2 = 0;
     let angle,distance = 0;
     for (var i = 0; i < graph.nodes.length; i++) {
       if ( Number(graph.nodes[i].id) === Number(graph.links[index_edge_target].source) ) {
         x1 = graph.nodes[i].X
         y1 = graph.nodes[i].Y
       }
       if ( Number(graph.nodes[i].id) === Number(graph.links[index_edge_target].target) ) {
         x2 = graph.nodes[i].X
         y2 = graph.nodes[i].Y
       }
     }

     distance1 = Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2))
     let UVector = { x:x2-x1, y:y2-y1}
     let VVector = { x:2, y:(-UVector.x/UVector.y)*2}

     centerX = (x1+x2)/2
     centerY = (y1+y2)/2
     distance2 = Math.sqrt(Math.pow(VVector.x,2)+Math.pow(VVector.y,2))
     let WVector = { x:VVector.x/distance2, y:VVector.y/distance2}

     cx3 = centerX
     cy3 = centerY


     cx1 = centerX - (WVector.x*(distance1/10))
     cy1 = centerY - (WVector.y*(distance1/10))
     cx2 = centerX - (WVector.x*(distance1/18))
     cy2 = centerY - (WVector.y*(distance1/18))

       d3.select("#markerOverlay").append('text')
         .text("B")
         .style('font', 'arial')
         .style('font-size', '30px')
         .style('font-weight', 'bold')
         .style('text-anchor', 'middle')
         .attr('x', function(d){
           return cx3
         })
         .attr('y', function(d){
           return cy3
         })
    .attr('transform', "translate(0,50)")
       d3.select("#markerOverlay").append('line')
         .attr('x1', cx1)
         .attr('y1', cy1)
         .attr('x2', cx2)
         .attr('y2', cy2)
         .attr('stroke', 'black')
         .attr('stroke-width', 3)
    .attr('transform', "translate(0,50)")
   }

   function createLinkModular(){
     var divide = 40
     var newSpeed = 0

     switch(graph.links[index_edge_reference].speed){
       case 1:
        newSpeed = 1/divide
       break;
       case 1.9:
        newSpeed = (1.9)/divide

       break;
       case 3.61:
        newSpeed = (3.61)/divide
       break;
       case 6.86:
        newSpeed = (6.86)/divide
       break;
       case 13.034:
        newSpeed = (13.034)/divide
       break;
       case 24.8:
        newSpeed = (24.8)/divide
       break;
     }
     if ( keyPressed === 1){
       graph.links[index_edge_target].speed = graph.links[index_edge_target].speed + newSpeed
     }else if ( keyPressed === -1){
       graph.links[index_edge_target].speed = graph.links[index_edge_target].speed - newSpeed
     }
     if (graph.links[index_edge_target].speed < 0.02) graph.links[index_edge_target].speed = 0.05
     if (graph.links[index_edge_target].speed > 60) graph.links[index_edge_target].speed = 60

     flownet_edges.stop()
      .particles("speed", function(d){ return d.speed*12 })
      .start()
      console.log(graph.links[index_edge_reference].speed,graph.links[index_edge_target].speed, newSpeed);
   }

   function send_data(result){
			//console.log(dat)
      end = Date.now();
			/***** RECUPERE LES DONNEEEES *******/
			var URL = window.location.href;
			var res = URL.split("/");
			var next_app = parseInt(res[res.length-1]);

      var graphALink = {speed: graph.links[index_edge_reference].speed, color: graph.links[index_edge_reference].color}
      var graphBLink = {speed: graph.links[index_edge_target].speed, color: graph.links[index_edge_target].color}

      var graphACleanLink = {speed: edgesExp.reference.speed, color: edgesExp.reference.color}
      var graphBCleanLink = {speed: edgesExp.target.speed, color: edgesExp.target.color}
      var data = {"redirection":next_app, "graphA":JSON.stringify(graphALink), "graphAClean":JSON.stringify(graphACleanLink),
            "graphB":JSON.stringify(graphBLink), "graphBClean":JSON.stringify(graphBCleanLink),"keyPressedList":JSON.stringify(result), "completion_time":JSON.stringify((end-start)/1000)};

			$.ajax({
			 url: '/store_data_counting_group',
				type: "POST",
				dataType: "JSON",
				data: data,
				//success: function (data) {console.log("RESULT", data); window.location = data.redirection;},
				success: function (data) {console.log("RESULT", "data"); window.location = data.redirection;},
				error: function (xhr, status, error) {console.log('Error: ' + error.message);},
			});

   }


   d3.select('#increaseMotion').on('click', function(){
     if ( !pressSpaceBar ) return
     send_data("B is faster than A")
   })

   d3.select('#decreaseMotion').on('click', function(){
     if ( !pressSpaceBar ) return
     send_data("")
   })

   document.addEventListener('keypress', (event) => {
     const keyName = event.key;
   	switch (keyName) {
   		case "Enter":
        if (!pressSpaceBar){
          d3.select('#spacePress').remove()
          pressSpaceBar = true
          showGraph()
          return false
        }
        /*
        if (!pressSpaceBar) return
   			send_data()
        return
   			break;
        */
   		default:
   	}
    if ( event.keyCode === 32 && pressSpaceBar){
      if ( pressSpaceBar ){
        send_data("")
      }
      //createLinkModular()
      /*d3.select('#spacePress').remove()
      pressSpaceBar = true
      showGraph()
      return false*/
    }
  });


    document.addEventListener('keydown', (event) => {
      if ( !pressSpaceBar ) return
      const keyName = event.key;
    	console.log(keyName);
    	switch (keyName) {
        case "ArrowRight":
          keyPressed = 1;
          keyPressedList.push(1)
          createLinkModular()
    			break;
    		case "ArrowLeft":
          keyPressed = -1;
          keyPressedList.push(-1)
          createLinkModular()
    			break;
    		default:

    	}
   });

	</script>



</html>
