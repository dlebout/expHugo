
<html lang="en">
<head>
    <meta charset="utf-8" />

    <button id=newGraph >newGraph</button>
    <button id=stop >Stop</button>
    <button id=selectEdge >selectTwoEdge</button>
    <select id=select>
      <option id=smallOpt> Small </option>
      <option id=MediumOpt> Medium </option>
      <option id=HighOpt> High </option>
    </select>
    <button id=saveEdges >SaveEdges</button>
    <button id=save >Save</button>
    <div id="graph"></div>
    <label id=smallLab > 0 small </label>
    <label id=mediumLab > 0 medium </label>
    <label id=highLab > 0 high </label>
    <style>

      html, body, #graph {
          width: 900px;
          height: 500px;
      }

    </style>


</head>
  <body>

  </body>
  <script src="lib/d3.v4.js"></script>
  <script src="lib/jquery.min.js"></script>

	<script>

    var width,height
    var chartWidth, chartHeight
    var margin
    var svg
    var chartLayer
    var data
    var selectedEdge1, selectedEdge2, marker1, marker2, marker1Bis, marker2Bis
    var selectedEdges = { small:[], medium:[], high:[]}

    d3.select('#newGraph').on('click', function(){
      selectedEdges = { small:[], medium:[], high:[]}
      clear()
      main()
    })

    d3.select('#saveEdges').on('click', function(){
      console.log(selectedEdge1.index, selectedEdge2.index,marker1, marker1Bis,marker2, marker2Bis);
      switch (d3.select('#select')._groups[0][0].value) {
        case 'Small':
          selectedEdges.small.push({source:selectedEdge1.index, target:selectedEdge2.index, marker1:marker1, marker1Bis:marker1Bis, marker2:marker2, marker2Bis: marker2Bis})
          d3.select('#smallLab').text(selectedEdges.small.length + ' small')
          break;
        case 'Medium':
          selectedEdges.medium.push({source:selectedEdge1.index, target:selectedEdge2.index, marker1:marker1, marker1Bis:marker1Bis, marker2:marker2, marker2Bis: marker2Bis})
          d3.select('#mediumLab').text(selectedEdges.medium.length + ' medium')
          break;
        case 'High':
          selectedEdges.high.push({source:selectedEdge1.index, target:selectedEdge2.index, marker1:marker1, marker1Bis:marker1Bis, marker2:marker2, marker2Bis: marker2Bis})
          d3.select('#highLab').text(selectedEdges.high.length + ' high')
          break;
        default:

      }
    })

    function selectEdgesTarget(distance, target, previous, hasJump){
      console.log('target', distance);
      pos = 0
      res = null
      targ = target.target.id
      prev = previous
      while (pos < distance) {
        change = false
        for (var i = 0; i < data.links.length; i++) {
          if ( data.links[i].source.id === targ ){
            if ( prev !== null && data.links[i].index === prev.index ){

            }else{
              prev = res
              res = data.links[i]
              targ = res.target.id
              change = true
              break;
            }
          }
        }
        console.log(res? res.index:null);
        if (!change) {
          if (hasJump) return null
          if ( res === null) selectEdgesSource(distance-pos,target,null, true)
          else return selectEdgesSource(distance-pos,res,prev, true)
        }
        pos += 1
      }
      return res
    }

    function selectEdgesSource(distance, target, previous, hasJump){
      console.log("source", distance);
      pos = 0
      res = null
      targ = target.source.id
      prev = previous
      while (pos < distance) {
        change = false
        for (var i = 0; i < data.links.length; i++) {
          if ( data.links[i].target.id === targ ){
            if ( prev !== null && data.links[i].index === prev.index ){

            }else{
              prev = res
              res = data.links[i]
              targ = res.source.id
              change = true
              break;
            }
          }
        }
        console.log(res? res.index:null);
        if (!change) {
          if (hasJump) return null
          if ( res === null) selectEdgesTarget(distance-pos,target,null, true)
          else return selectEdgesTarget(distance-pos,res,prev, true)
        }
        pos += 1
      }
      return res
    }

    function addMarker(mode, edge){
      middleX = (Number(edge.attr('x1'))+Number(edge.attr('x2')))/2
      middleY = (Number(edge.attr('y1'))+Number(edge.attr('y2')))/2

      angleDeg = Math.abs(Math.atan2(Number(edge.attr('y2')) - Number(edge.attr('y1')), Number(edge.attr('x2')) - Number(edge.attr('x1'))) * 180 / Math.PI)
      console.log(angleDeg);
      if ( (angleDeg > 0 && angleDeg < 22) || (angleDeg > 157 && angleDeg < 180) ){
          middleY -= 25
      }else if ( (angleDeg > 22 && angleDeg < 67) || (angleDeg > 112 && angleDeg < 157) ){
          middleX -= 25
          middleY -= 10
      }else {
        middleX -= 25
      }

      groupCircle = d3.select('svg').append('g').attr('id', 'groupCircle')
      inter2 =groupCircle.append('circle')
        .attr('cx', middleX)
        .attr('cy', middleY)
        .attr('r', 10)
        .attr('fill', 'red')
        .call(d3.drag()
            .on("start", function(){})
            .on("drag", function(){
              this.setAttribute('cx', d3.event.x)
              this.setAttribute('cy', d3.event.y)
              if (mode == 'marker1') marker1Bis = [d3.select(this).attr('cx')-chartWidth/2,d3.select(this).attr('cy')-(chartHeight/2)-100]
              else marker2Bis = [d3.select(this).attr('cx')-chartWidth/2,d3.select(this).attr('cy')-(chartHeight/2)-100]
            })
            .on("end", function(){}));
      inter = groupCircle.append('circle')
        .attr('cx', middleX)
        .attr('cy', middleY)
        .attr('r', 10)
        .attr('fill', 'green')
        .call(d3.drag()
            .on("start", function(){})
            .on("drag", function(){
              this.setAttribute('cx', d3.event.x)
              this.setAttribute('cy', d3.event.y)
              if (mode == 'marker1') marker1 = [d3.select(this).attr('cx')-chartWidth/2,d3.select(this).attr('cy')-(chartHeight/2)-100]
              else marker2 = [d3.select(this).attr('cx')-chartWidth/2,d3.select(this).attr('cy')-(chartHeight/2)-100]
            })
            .on("end", function(){}));

      if (mode == 'marker1') {
        marker1 = [inter.attr('cx')-chartWidth/2,inter.attr('cy')-(chartHeight/2)-100]
        marker1Bis = [inter2.attr('cx')-chartWidth/2,inter2.attr('cy')-(chartHeight/2)-100]
      }else{
         marker2 = [inter.attr('cx')-chartWidth/2,inter.attr('cy')-(chartHeight/2)-100]
         marker2Bis = [inter2.attr('cx')-chartWidth/2,inter2.attr('cy')-(chartHeight/2)-100]
       }
    }

    function distanceBetween(n1,n2){
      return Math.sqrt(Math.pow(n2.x-n1.x,2)+Math.pow(n2.y-n1.y,2))
    }

    function compareDistance(edge1, edge2){
      let minSource = Math.min(distanceBetween(edge1.source,edge2.source),distanceBetween(edge1.source,edge2.target))
      let minTarget = Math.min(distanceBetween(edge1.target,edge2.source),distanceBetween(edge1.target,edge2.target))
      return Math.min(minSource,minTarget)
    }

    d3.select('#selectEdge').on('click', function(){
      d3.selectAll('#groupCircle').remove()
      breaklimit = 0
      while (breaklimit < 10){
        selectedEdge1 = data.links[Math.floor((Math.random()*data.links.length))];
        switch (d3.select('#select')._groups[0][0].value) {
          case 'Small':
            selectedEdge2 = selectEdgesTarget(1,selectedEdge1,null, false)
            if (selectedEdge2 === null) selectedEdge2 = selectEdgesSource(1,selectedEdge1,null, false)
            break;
          case 'Medium':
            distance = -1
            while( distance < 200 || distance > 400){
              selectedEdge1 = data.links[Math.floor((Math.random()*data.links.length))];
              selectedEdge2 = data.links[Math.floor((Math.random()*data.links.length))];
              distance = compareDistance(selectedEdge1, selectedEdge2)
              console.log("distance", distance);
            }
            //selectedEdge2 = selectEdgesTarget(2,selectedEdge1,null, false)
            //if (selectedEdge2 === null) selectedEdge2 = selectEdgesSource(2,selectedEdge1,null, false)
            break;
          case 'High':
            distance = -1
            while( distance < 800 || distance > 1200){
              selectedEdge1 = data.links[Math.floor((Math.random()*data.links.length))];
              selectedEdge2 = data.links[Math.floor((Math.random()*data.links.length))];
              distance = compareDistance(selectedEdge1, selectedEdge2)
              console.log("distance", distance);
            }
            //selectedEdge2 = selectEdgesTarget(6,selectedEdge1,null, false)
            //if (selectedEdge2 === null) selectedEdge2 = selectEdgesSource(6,selectedEdge1,null, false)
            break;
          default:

        }
        if (selectedEdge2 !== null){
          break;
        }
        breaklimit += 1;
      }
      d3.selectAll('line').attr('stroke', 'black').attr('stroke-width', 1)
      d3.select('#link'+selectedEdge1.index).attr('stroke', 'red').attr('stroke-width', 5)
      d3.select('#link'+selectedEdge2.index).attr('stroke', 'blue').attr('stroke-width', 5)
      //console.log(selectedEdge1.source,selectedEdge1.target," ",selectedEdge2.source,selectedEdge2.target);
      addMarker('marker1', d3.select('#link'+selectedEdge1.index))
      console.log(marker1,marker1Bis);
      addMarker('marker2', d3.select('#link'+selectedEdge2.index))
      console.log(marker2, marker2Bis);
    })


    function main() {
        console.log('main');
        var rangeLinks = 40
        var rangeNodes = 41//Math.floor((Math.random()*20))+25
        //data = createPlanarGraph(1200, 1200, 1.5*Math.sqrt(rangeNodes), rangeNodes, rangeLinks)
        //console.log(data);
        setSize()
/*        svg.append("g")
            .selectAll("circle")
            .data(data.nodes)
            .enter().append("circle")
            .attr('id', function(d){  return 'node'+d.id })
            .attr("r", function(d){  return 4 })
            .attr("cx", function(d){ return 150+d.x })
            .attr("cy", function(d){ return 150+d.y })
            /*.call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));
        console.log(data.links.length);
        svg.append("g")
            .selectAll("line")
            .data(data.links)
            .enter()
            .append("line")
            .attr('id', function(d){  return 'link'+d.index } )
            .attr("x1", function(d){ return d3.select('#node'+d.source.id).attr('cx')})
            .attr("y1", function(d){ return d3.select('#node'+d.source.id).attr('cy')})
            .attr("x2", function(d){ return d3.select('#node'+d.target.id).attr('cx')})
            .attr("y2", function(d){ return d3.select('#node'+d.target.id).attr('cy')})
            .attr("stroke", "black")

        */
        data = {
            nodes:d3.range(0, rangeNodes).map(function(d){ return {id: d ,r:10}}),
            links: null
        }
        //data.links = d3.range(0, rangeLinks).map(function(){ return {source:parseInt(Math.random() * rangeNodes), target: parseInt(Math.random() * rangeNodes)} })
        data.links = createLinks(data.nodes, rangeNodes,rangeLinks)

        //setSize()
        drawChart(data)

        d3.select('#save').on('click', function(){
          var res = {
            nodes: [],
            links: [data.links.map(function(d,i){ return {id:d.id, source:d.source.id, target:d.target.id}})]
          }
          d3.selectAll('circle').each(function(d){
            if ( d != undefined ) res.nodes.push({id:d.id, X:Number(this.getAttribute('cx'))-chartWidth/2, Y:Number(this.getAttribute('cy'))-(chartHeight/2)-100})
          })
          console.log(JSON.stringify(res));
          console.log(JSON.stringify(selectedEdges));
        })
    }

    function clear(){
      d3.select('#graph').selectAll('*').remove()
       svg = d3.select("#graph").append("svg")
       chartLayer = svg.append("g").classed("chartLayer", true)
    }

    function createNodeCentral(centroid, nodesUnlinked, offsetId){
      var res = []
      var newCentroid = []
      for (var i = 0; i < nodesUnlinked.length; i++) {
        let targetNode = nodesUnlinked[i]
        res.push({index:i+offsetId, source: centroid, target: targetNode})
      }
      return {res:res, centroid:nodesUnlinked}
    }

    function createLinks(nodes, rangeNodes, rangeLinks){
      var res = []
      var nodelinks = [nodes[0]]
      var nodeUnlinks = []
      var offsetId = 0
      for (var i = 1; i < rangeNodes; i++) {
        nodeUnlinks.push(nodes[i])
      }

      let rand = parseInt(Math.random() * 5)+3
      let firstCreate = createNodeCentral(nodelinks[0], nodeUnlinks.splice(0,rand), offsetId)
      offsetId += rand
      res = res.concat(firstCreate.res)
      nodelinks = firstCreate.centroid

      while ( nodeUnlinks.length > 0){
        var newNodes = []
        let randSelect = parseInt(Math.random() * nodelinks.length-4)+4
        for (var i = 0; i < randSelect; i++) {
          let randIndex = parseInt(Math.random() * nodelinks.length)
          let randEdge = parseInt(Math.random() * 6)+3
          let nextCreate = createNodeCentral(nodelinks[randIndex], nodeUnlinks.splice(0,randEdge), offsetId)
          offsetId += randEdge
          res = res.concat(nextCreate.res)
          nodelinks.splice(randIndex,1)
          newNodes = newNodes.concat(nextCreate.centroid)
        }
        nodelinks = newNodes
      }
      console.log(res);
      return res
    }

    function createLinksBasic(nodes, rangeNodes, rangeLinks){
      var nodelinks = [nodes[0]]
      var nodeUnlinks = []
      for (var i = 1; i < rangeNodes; i++) {
        nodeUnlinks.push(nodes[i])
      }

      var res = []
      for (var i = 0; i < rangeLinks; i++) {
          let targetNodeIndex = parseInt(Math.random() * nodeUnlinks.length)
          let targetNode = nodeUnlinks[targetNodeIndex]
          let sourceNodeIndex = parseInt(Math.random() * nodelinks.length)
          let sourceNode = nodelinks[sourceNodeIndex]
          nodelinks.push(targetNode)
          nodeUnlinks.splice(targetNodeIndex, 1);
          res.push({id:i, source: sourceNode, target: targetNode})
      }
      console.log(res);
      return res
    }

    function setSize() {
        width = 2500//document.querySelector("#graph").clientWidth
        height = 1500//document.querySelector("#graph").clientHeight

        margin = {top:0, left:0, bottom:0, right:0 }


        chartWidth = width - (margin.left+margin.right)
        chartHeight = height - (margin.top+margin.bottom)

        svg.attr("width", width).attr("height", height)
        d3.select('svg').append('circle')
          .attr('cx', chartWidth/2)
          .attr('cy', chartHeight/2)
          .attr('r', 20)
          .attr('fill', 'purple')

        chartLayer
            .attr("width", chartWidth)
            .attr("height", chartHeight)
            .attr("transform", "translate("+[margin.left, margin.top]+")")


    }

    function drawChart(data) {
        var simulation = d3.forceSimulation()
            .force("link", d3.forceLink().id(function(d) { return d.index }))
            .force("collide",d3.forceCollide( function(d, i){return d.r + 40 + i*1.8 }).iterations(32) )
            .force("charge", d3.forceManyBody().strength(-100).distanceMin(50).distanceMax(500))
            .force("center", d3.forceCenter(chartWidth / 2, chartHeight / 2))
            .force("y", d3.forceY(0))
            .force("x", d3.forceX(0))

        var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(data.links)
            .enter()
            .append("line")
            .attr("stroke", "black")

        var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("circle")
            .data(data.nodes)
            .enter().append("circle")
            .attr("r", function(d){  return d.r })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));


        var ticked = function() {
            link
                .attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

            node
                .attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; });
        }

        simulation
            .nodes(data.nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(data.links);

        d3.select('#stop').on('click', function(){
            simulation.stop()
            drawNode(data)
        })

        function dragstarted(d) {
            if (!d3.event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(d) {
            d.fx = d3.event.x;
            d.fy = d3.event.y;
        }

        function dragended(d) {
            if (!d3.event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }

    }

    function drawNode(data) {
      console.log('stop simulation');
      d3.select('svg').selectAll('*').remove()

      var node = svg.append("g")
          .selectAll("circle")
          .data(data.nodes)
          .enter().append("circle")
          .attr('id', function(d){  return 'node'+d.id })
          .attr("r", function(d){  return d.r })
          .attr("cx", function(d){ return d.x })
          .attr("cy", function(d){ return d.y })
          .call(d3.drag()
              .on("start", dragstarted)
              .on("drag", dragged)
              .on("end", dragended));

      var link = svg.append("g")
          .selectAll("line")
          .data(data.links)
          .enter()
          .append("line")
          .attr('id', function(d){  return 'link'+d.index } )
          .attr("x1", function(d){ return d3.select('#node'+d.source.id).attr('cx')})
          .attr("y1", function(d){ return d3.select('#node'+d.source.id).attr('cy')})
          .attr("x2", function(d){ return d3.select('#node'+d.target.id).attr('cx')})
          .attr("y2", function(d){ return d3.select('#node'+d.target.id).attr('cy')})
          .attr("stroke", "black")

      var saveX,saveY, dragNodes, dragLinks

      function dragstarted(d) {
        saveX = d3.event.x
        saveY = d3.event.y

        var indexNode = 0
        idNodes = [d3.select(this).attr('id')]
        dragNodes = [d3.select(this)]
        dragLinks = []
        find = true
        while (find) {
          find = false
          countNodes = dragNodes.length - indexNode
          for (var j = indexNode; j < dragNodes.length; j++) {
            for (var i = 0; i < data.links.length; i++) {
              if ( 'node'+data.links[i].source.id == dragNodes[j].attr('id') ){
                if ( !dragLinks.includes(d3.select('#link'+ data.links[i].id))) dragLinks.push(d3.select('#link'+ data.links[i].id))
                if ( !idNodes.includes('#node'+ data.links[i].target.id)) {
                  dragNodes.push(d3.select('#node'+ data.links[i].target.id))
                  idNodes.push('#node'+ data.links[i].target.id)
                }
                find = true
              }
            }
          }
          indexNode += countNodes
        }
        console.log(dragNodes);
      }

      function dragged(d) {
          console.log('boucle');
          for (var i = 0; i < dragNodes.length; i++) {
            dragNodes[i].attr("cx", parseFloat(dragNodes[i].attr('cx'))+(d3.event.x-saveX));
            dragNodes[i].attr("cy", parseFloat(dragNodes[i].attr('cy'))+(d3.event.y-saveY));
          }

          d3.selectAll('line')
              .attr("x1", function(d){ return d3.select('#node'+d.source.id).attr('cx')})
              .attr("y1", function(d){ return d3.select('#node'+d.source.id).attr('cy')})
              .attr("x2", function(d){ return d3.select('#node'+d.target.id).attr('cx')})
              .attr("y2", function(d){ return d3.select('#node'+d.target.id).attr('cy')})

          saveX = d3.event.x
          saveY = d3.event.y
      }

      function dragended(d) {

      }
    }

	</script>



</html>
